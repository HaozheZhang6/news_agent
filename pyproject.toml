[project]
name = "voice-news-agent"
version = "0.1.0"
description = "Voice-activated news agent with real-time interruption and smart memory"
authors = [
    {name = "Voice News Agent Team", email = "team@voicenewsagent.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["voice", "news", "ai", "agent", "real-time"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # FastAPI and web framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
    "python-multipart>=0.0.6",
    
    # Authentication and security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    
    # Configuration and environment
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.1.0",
    
    # Database and ORM
    "supabase>=2.3.0",
    "asyncpg>=0.29.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    
    # Cache
    "redis>=5.0.1",
    "upstash-redis>=1.4.0",
    
    # AI and LLM
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "openai>=1.3.0",
    
    # Financial data
    "yfinance>=0.2.28",
    "alpha-vantage>=2.3.1",
    
    # Voice and audio
    "edge-tts>=6.1.9",
    "pygame>=2.5.2",
    "funasr>=1.0.0",
    "webrtcvad>=2.0.10",
    "pyaudio>=0.2.11",
    "pydub>=0.25.1",
    
    # Language detection
    "langid>=1.1.6",
    "langdetect>=1.0.9",
    
    # Speech recognition
    "speechrecognition>=3.10.0",
    
    # HTTP and API
    "httpx>=0.24.0,<0.25.0",
    "aiofiles>=23.2.1",
    "pydantic>=2.5.0",
    
    # Utilities
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    # Development tools
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

test = [
    # Testing framework
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.24.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "websockets>=11.0.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
]

[project.urls]
Homepage = "https://github.com/voicenewsagent/voice-news-agent"
Documentation = "https://docs.voicenewsagent.com"
Repository = "https://github.com/voicenewsagent/voice-news-agent"
Issues = "https://github.com/voicenewsagent/voice-news-agent/issues"

[project.scripts]
voice-news-agent = "src.main:main"
voice-news-agent-server = "backend.app.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend", "src"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--timeout=15"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "backend: marks tests as backend tests",
    "src: marks tests as source component tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["backend", "src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
